#!/usr/bin/env python
PACKAGE = "tofcore_ros1"
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
 
gen.add("api_version",    str_t,    0, "SW API Version","0")
gen.add("chip_id",    str_t,    0, "Chip ID",  "0")
gen.add("model_name",   str_t,   0, "Sensor Model Name",  "Mojave")
gen.add("sw_version",   str_t,   0, "Software Version",  "0")
gen.add("sensor_url",   str_t,   0, "Connection to Sensor",  "/dev/ttyACM0")
gen.add("streaming",   bool_t,   0, "Boolean Streaming Parameter",  True)
gen.add("capture_mode",   str_t,   0, "Device Streaming Mode",  "distance_amplitude")
gen.add("integration_time",   int_t,   0, "Integration Time",  500 , 0, 4000)
gen.add("modulation_frequency",   int_t,   0, "Modulation Frequency",  12000 , 0 , 24000)
gen.add("distance_offset",   int_t,   0, "Distance Offset to be Applied",  0,-15,15)
gen.add("minimum_amplitude",   int_t,   0, "Minimum Amplitude",  50,0,2896)
gen.add("maximum_amplitude",   int_t,   0, "Maximum Amplitude",  2000,0,2896)
gen.add("flip_hotizontal",   bool_t,   0, "Flip Horizontal",  False)
gen.add("flip_vertical",   bool_t,   0, "Flip Vertical",  False)
gen.add("binning",   bool_t,   0, "Binning",  False)
gen.add("sensor_name",   str_t,   0, "Configurable Sensor Name",  "Mojave")
gen.add("sensor_location",   str_t,   0, "Configurable Sensor Location",  "Unknown")
gen.add("discovery_filter",   str_t,   0, "Discovery Filter",  "NA")
# Filter parameters
gen.add("median_filter",   bool_t,   0, "Median Filter Enable",  True)
gen.add( "median_kernel",   int_t,   0, "Median Filter Kernel Size",  3 , 1, 5)
gen.add( "bilateral_filter",   bool_t,   0, "Bilateral Filter Enable",  True)
gen.add( "bilateral_kernel",   int_t,   0, "Bilateral Filter Kernel",  5 , 1, 15)
gen.add( "bilateral_color",   int_t,   0, "Bilateral Filter Color Sigma",  75 , 0, 5000)
gen.add( "bilateral_space",   int_t,   0, "Bilateral Filter Space Sigma",  75 , 0, 300)
gen.add( "gradient_filter",   bool_t,   0, "Gradient Filter Enable",  True)
gen.add( "gradient_kernel",   int_t,   0, "Gradient Kernel Width",  1 , 1, 3)
gen.add( "gradient_threshold",   int_t,   0, "Gradient Threshold",  50 , 0, 10000)
gen.add( "gradient_filter_support",   int_t,   0, "Gradient Filter Support",  6 , 0, 9)
#Adtl Params
gen.add( "hdr_enable",   bool_t,   0, "HDR Enable",  False)
gen.add( "hdr_integrations",   str_t,   0, "Comma Separated HDR Integration Times",  "500,4000")
gen.add( "ae_enable",   bool_t,   0, "Automatic Exposure Enable",  True)
gen.add( "ae_target_mean_amp", double_t,   0, "Automatic Exposure ",   800 , 1, 2000)
gen.add( "ae_target_exp_avg_alpha", double_t,   0, "Automatic Exposure ",   0.1 , 0, 1)
gen.add( "ae_rc_speed_factor", double_t,   0, "Automatic Exposure ",    0.2 , 0, 1)
gen.add( "ae_rc_speed_factor_fast", double_t,   0, "Automatic Exposure ",    0.9 , 0, 1)
gen.add( "ae_rc_rel_error_thresh", double_t,   0, "Automatic Exposure ",    0.1 , 0, 1)
gen.add( "ae_rc_min_amp", int_t,   0, "Automatic Exposure ",   100 , 0, 2000)
gen.add( "ae_rc_apply_min_reflect_thresh", bool_t,   0, "Automatic Exposure ",   True)
gen.add( "ae_min_integration_time_us", int_t,   0, "Automatic Exposure ",   10 , 1, 4000)
gen.add( "ae_max_integration_time_us", int_t,   0, "Automatic Exposure ",   4000 , 1, 4000)
gen.add( "ae_roi_top_px", int_t,   0, "Automatic Exposure ",   0 , 0, 240)
gen.add( "ae_roi_bottom_px", int_t,   0, "Automatic Exposure ",   0 , 0, 240)
gen.add( "ae_roi_left_px", int_t,   0, "Automatic Exposure ",   0 , 0, 320)
gen.add( "ae_roi_right_px", int_t,   0, "Automatic Exposure ",   0 , 0, 320)

#gen.add("temporal_filter",   bool_t,   0, "Temporal Filter Enable",  True)
#gen.add("temporal_alpha",   int_t,   0, "Temporal Filter Alpha Value",  3 , 0, 9)
  

exit(gen.generate(PACKAGE, "tof_sensor", "tofcore"))
